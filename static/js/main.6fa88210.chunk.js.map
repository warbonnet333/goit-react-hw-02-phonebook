{"version":3,"sources":["transitions/slide.module.css","components/Form/Form.module.css","components/Contact/Contact.module.css","components/List/List.module.css","components/Filter/Filter.module.css","components/Alert/Alert.module.css","transitions/pop.module.css","transitions/slideFromTop.module.css","components/Contact/Contact.jsx","components/redux/listActions.js","components/service/changeFilter.js","components/List/List.jsx","components/service/checkedName.js","components/redux/alertActions.js","components/Form/Form.jsx","components/redux/filterActions.js","components/Filter/Filter.jsx","components/Alert/Alert.jsx","components/App.jsx","components/redux/listReduser.js","components/redux/alertReduser.js","components/redux/filterReduser.js","components/redux/store.js","index.js"],"names":["module","exports","Contact","name","number","onDelete","className","style","list__item","type","onClick","icon","addContact","createAction","deleteContact","addFromLocalStorage","changeFinalList","prevArray","filter","item","toLowerCase","includes","List","this","props","items","finalList","TransitionGroup","component","styles","list","map","id","CSSTransition","key","timeout","classNames","slideTransition","Component","connect","state","contacts","dispatch","listActions","checkedName","contactList","newName","find","switchAlert","closeAlert","uuidv4","require","initialState","Form","isShown","hendleChange","e","target","value","setState","hendleSubmit","preventDefault","container","in","title","onSubmit","form","htmlFor","onChange","required","alertActions","fillFilter","changeFilter","event","filterActions","Alert","onCloseAlert","setTimeout","existedName","alert","App","persistedContacts","localStorage","getItem","fetchFromLocal","JSON","parse","prevProps","prevState","setItem","stringify","isFilterShown","length","slideTopTransition","unmountOnExit","popTransition","showAlert","array","createReducer","action","payload","store","configureStore","reducer","listReduser","alertReduser","filterReduser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fa88210.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__4A6p-\",\"enterActive\":\"slide_enterActive__RGQRF\",\"exit\":\"slide_exit__1GnLL\",\"exitActive\":\"slide_exitActive__2LwhS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Form_title__2V9mT\",\"container\":\"Form_container__3tQkK\",\"form\":\"Form_form__1ik1C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list__item\":\"Contact_list__item__G9sOe\",\"icon\":\"Contact_icon__2NANC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"List_list__3Of5u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__5MOyF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__1QPsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1Q5lr\",\"enterActive\":\"pop_enterActive__1Qxdr\",\"exit\":\"pop_exit__3lLug\",\"exitActive\":\"pop_exitActive__lDCeO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slideFromTop_enter__1iKOs\",\"enterActive\":\"slideFromTop_enterActive__3lnQZ\",\"exit\":\"slideFromTop_exit__2aqwB\",\"exitActive\":\"slideFromTop_exitActive__-j83t\"};","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport style from './Contact.module.css'\r\nimport { TiDelete } from \"react-icons/all\"\r\n\r\nconst Contact = ({ name, number, onDelete }) =>\r\n  <li className={style.list__item}>\r\n    <p>{name}</p>\r\n    <p>{number}</p>\r\n    <button type=\"button\" onClick={onDelete}><TiDelete className={style.icon} /></button>\r\n  </li>\r\n\r\n\r\nContact.propTypes = {\r\n  onDelete: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string\r\n}\r\n\r\nexport default Contact","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"listReduser/addContact\");\r\nexport const deleteContact = createAction(\"listReduser/deleteContact\");\r\nexport const addFromLocalStorage = createAction(\r\n  \"listReduser/addFromLocalStorage\"\r\n);\r\n","const changeFinalList = (prevArray, filter) =>\n  prevArray.filter(item =>\n    item.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\nexport default changeFinalList;\n\n\n","import React, { Component } from \"react\";\r\nimport styles from './List.module.css'\r\nimport Contact from \"../Contact/Contact\"\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\"\r\nimport slideTransition from '../../transitions/slide.module.css'\r\nimport { connect } from \"react-redux\"\r\nimport * as listActions from \"../redux/listActions\"\r\nimport changeFinalList from \"../service/changeFilter\"\r\n\r\n\r\nclass List extends Component {\r\n  render() {\r\n    const { items, deleteContact, filter } = this.props\r\n    const finalList = changeFinalList(items, filter)\r\n\r\n    return <TransitionGroup component=\"ul\" className={styles.list} >\r\n      {\r\n        finalList.map(({ id, name, number }) => (\r\n          <CSSTransition key={id} timeout={250} classNames={slideTransition}>\r\n            <Contact name={name} number={number} onDelete={() => deleteContact(id)} />\r\n          </CSSTransition>\r\n        ))\r\n      }\r\n    </TransitionGroup >\r\n  }\r\n\r\n}\r\n\r\nList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string,\r\n  })\r\n  ).isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired\r\n}\r\n\r\nconst mstp = state => ({\r\n  items: state.contacts,\r\n  filter: state.filter\r\n})\r\n\r\nconst mDTP = dispatch => ({\r\n  deleteContact: id => dispatch(listActions.deleteContact(id))\r\n})\r\n\r\nexport default connect(mstp, mDTP)(List)","const checkedName = (contactList, newName) =>\n    contactList.find(({ name }) => {\n        if (name.toLowerCase() === newName.toLowerCase()) {\n            return newName\n        }\n        return false\n    })\n\nexport default checkedName","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const switchAlert = createAction(\"alertReduser/switchAlert\");\nexport const closeAlert = createAction(\"alertReduser/closeAlert\");\n","import React, { Component } from \"react\";\r\nimport styles from \"./Form.module.css\"\r\nimport { CSSTransition } from \"react-transition-group\"\r\nimport slideTransition from '../../transitions/slide.module.css'\r\nimport checkedName from \"../service/checkedName\"\r\nimport PropTypes from \"prop-types\"\r\nimport { connect } from \"react-redux\"\r\nimport * as listActions from \"../redux/listActions\"\r\nimport * as alertActions from '../redux/alertActions'\r\nconst uuidv4 = require(\"uuid/v4\");\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  number: \"\",\r\n}\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    isShown: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ isShown: true })\r\n  }\r\n\r\n  hendleChange = (e) => {\r\n    const { name, value } = e.target\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  hendleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const { name, number } = this.state\r\n    const { contacts, addContact } = this.props\r\n    if (!checkedName(contacts, name)) {\r\n      const contactToAdd = {\r\n        name,\r\n        number,\r\n        id: uuidv4()\r\n      }\r\n      addContact(contactToAdd)\r\n    } else {\r\n      this.props.switchAlert(name)\r\n    }\r\n\r\n\r\n    this.setState(state => ({ ...state, ...initialState }))\r\n  }\r\n\r\n  render() {\r\n    const { name, number, isShown } = this.state\r\n    return (\r\n      <div className={styles.container}>\r\n        <CSSTransition in={isShown} timeout={500} classNames={slideTransition}>\r\n          <h2 className={styles.title}>Phonebook</h2>\r\n        </CSSTransition>\r\n        <form onSubmit={this.hendleSubmit} className={styles.form} >\r\n          <label htmlFor=\"name\">Name</label>\r\n          <input type=\"text\" name=\"name\" value={name} onChange={this.hendleChange} required />\r\n          <label htmlFor=\"number\">Number</label>\r\n          <input type=\"number\" name=\"number\" value={number} onChange={this.hendleChange} required />\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nconst mSTP = state => ({\r\n  contacts: state.contacts\r\n})\r\n\r\nconst mDTP = dispatch => ({\r\n  addContact: (name, number) => dispatch(listActions.addContact(name, number)),\r\n  switchAlert: name => dispatch(alertActions.switchAlert(name))\r\n})\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string,\r\n  })\r\n  ).isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n  switchAlert: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mSTP, mDTP)(Form)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fillFilter = createAction(\"filterReduser/fillFilter\");\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport style from \"./Filter.module.css\"\r\nimport * as filterActions from \"../redux/filterActions\"\r\nimport { connect } from \"react-redux\"\r\n\r\n\r\nconst Filter = ({ value, changeFilter }) => (\r\n  <div className={style.container}>\r\n    <label htmlFor=\"find\">Find contact by name</label>\r\n    <input type=\"text\" name=\"find\" value={value} onChange={changeFilter} />\r\n  </div>\r\n)\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  changeFilter: PropTypes.func.isRequired\r\n}\r\n\r\nconst mSTP = state => ({\r\n  value: state.filter\r\n})\r\n\r\nconst mDTP = (dispatch) => ({\r\n  changeFilter: (event) => dispatch(filterActions.fillFilter(event.target.value))\r\n})\r\n\r\nexport default connect(mSTP, mDTP)(Filter)","import React, { Component } from \"react\"\r\nimport style from \"./Alert.module.css\"\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from \"react-redux\"\r\nimport * as alertActions from '../redux/alertActions'\r\n\r\n\r\nclass Alert extends Component {\r\n\r\n  componentDidMount() {\r\n    const { onCloseAlert } = this.props\r\n    setTimeout(onCloseAlert, 3000)\r\n  }\r\n\r\n  render() {\r\n    const { existedName, onCloseAlert } = this.props\r\n    return (\r\n      <div className={style.alert}>\r\n        <p>\r\n          {`${existedName} is already in contacts`}\r\n        </p>\r\n        <button type=\"button\" onClick={onCloseAlert}>OK</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nAlert.propTypes = {\r\n  existedName: PropTypes.string,\r\n  onCloseAlert: PropTypes.func.isRequired\r\n}\r\n\r\nconst mSTP = state => ({\r\n  existedName: state.alert.existedName\r\n})\r\n\r\nconst mDTP = dispatch => ({\r\n  onCloseAlert: () => dispatch(alertActions.closeAlert())\r\n})\r\n\r\n\r\nexport default connect(mSTP, mDTP)(Alert)","import React, { Component } from \"react\";\r\nimport List from \"./List/List\"\r\nimport Form from \"./Form/Form\"\r\nimport Filter from \"./Filter/Filter\"\r\nimport Alert from \"./Alert/Alert\"\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport popTransition from '../transitions/pop.module.css';\r\nimport slideTopTransition from '../transitions/slideFromTop.module.css'\r\nimport { connect } from \"react-redux\"\r\nimport * as listActions from \"./redux/listActions\"\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    const persistedContacts = localStorage.getItem(\"contacts\")\r\n    if (persistedContacts) {\r\n      this.props.fetchFromLocal(JSON.parse(persistedContacts))\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.contacts !== this.props.contacts) {\r\n      localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { contacts, isShown, filter } = this.props\r\n    const isFilterShown = !!(contacts.length > 2 || filter)\r\n\r\n    return (\r\n      <div>\r\n        <CSSTransition in={isShown} timeout={250} classNames={slideTopTransition} unmountOnExit>\r\n          <Alert />\r\n        </CSSTransition>\r\n        <Form />\r\n        <CSSTransition in={isFilterShown} timeout={250} classNames={popTransition} unmountOnExit>\r\n          <Filter />\r\n        </CSSTransition>\r\n        <List />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mSTP = state => ({\r\n  contacts: state.contacts,\r\n  isShown: state.alert.showAlert,\r\n  filter: state.filter\r\n})\r\n\r\nconst mDTP = dispatch => ({\r\n  fetchFromLocal: array => dispatch(listActions.addFromLocalStorage(array))\r\n})\r\n\r\nApp.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string,\r\n  })\r\n  ).isRequired,\r\n  isShown: PropTypes.bool.isRequired,\r\n  filter: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default connect(mSTP, mDTP)(App)\r\n\r\n\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, addFromLocalStorage } from \"./listActions\";\r\n\r\nexport default createReducer([], {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((item) => item.id !== action.payload),\r\n  [addFromLocalStorage]: (state, action) => [...state, ...action.payload],\r\n});\r\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { switchAlert, closeAlert } from \"./alertActions\";\n\nexport default createReducer(\n  { showAlert: false },\n  {\n    [switchAlert]: (state, action) => ({\n      showAlert: true,\n      existedName: action.payload,\n    }),\n    [closeAlert]: (state, action) => ({ showAlert: false }),\n  }\n);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { fillFilter } from \"./filterActions\";\n\nexport default createReducer(\"\", {\n  [fillFilter]: (state, action) => action.payload,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport listReduser from \"./listReduser\";\r\nimport alertReduser from \"./alertReduser\";\r\nimport filterReduser from \"./filterReduser\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: listReduser,\r\n    alert: alertReduser,\r\n    filter: filterReduser,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport store from \"./components/redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}